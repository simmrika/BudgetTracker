@page
@model IndexModel
@{
    ViewData["Title"] = "Dashboard";
    var currentDate = DateTime.Now.ToString("yyyy-MM-dd");
}


<section class="balance-section">
    <div class="total-balance">
        <h3>Your total balance</h3>
        <p class="balance-amount">Rs. 8000.00</p>
        <div class="balance-change">
            <div class="income">
                <i class="fa-solid fa-arrow-up"></i>
                <span>Rs. 500.00</span>
                <p>Today's Income</p>
            </div>
            <div class="expense">
                <i class="fa-solid fa-arrow-down"></i>
                <span>Rs. 500.00</span>
                <p>Today's Expense</p>
            </div>
        </div>
    </div>

    <div class="bank-cards-carousel">
        <div class="bank-cards">
            <div class="card">
                <div class="card-icons">
                    <!-- Link to add or update cash entry -->
                    <a asp-page="/CashEntry" style="text-decoration: none;">
                        <i style="color: white; font-size: 14px; margin-top: 5px; cursor: pointer;"
                           class="fa fa-plus"
                           title="Add or Update Cash">
                        </i>
                    </a>

                    <!-- Delete Cash Entry -->
                    @if (Model.CashEntry != null)
                    {
                        <i style="color: white; font-size: 14px; margin-top: 5px; cursor: pointer;"
                           class="fa fa-trash delete-icon"
                           title="Delete"
                           onclick="deleteCashEntry(@Model.CashEntry.Id)">
                        </i>
                    }
                </div>
                <h4>Cash</h4>
                <p>@Model.UserDetails.FirstName @Model.UserDetails.FirstName</p>
                <p>@Model.CashEntry?.AddDate.ToString("yyyy-MM-dd")</p>
                <p>
                    NPR. @Model.CashEntry?.Amount.ToString("F2")
                    <i class="fa fa-eye"></i>
                </p>
            </div>


            <div class="card">
                @if (Model.UserDetails != null)
                {
                    <div class="card-icons">
                        <i style="color: white ; font-size: 14px; margin-top: 5px;" class="fa fa-trash delete-icon" title="Delete"></i>
                    </div>
                    <h4>@Model.UserDetails.BankName</h4>
                    <p>@Model.UserDetails.FirstName @Model.UserDetails.LastName</p>
                    <p>@currentDate</p>
                    <p>Account Number @Model.UserDetails.AccountNumber</p>
                    <p>NPR. @Model.UserDetails.Balance.ToString("F2") <i class="fa fa-eye"></i></p>
                }
                else
                {
                    <p>No user details available.</p>
                }
            </div>

            <div class="card">
                @if (Model.UserDetails != null)
                {
                    <h4>@Model.UserDetails.BankName</h4>
                    <p>@Model.UserDetails.FirstName @Model.UserDetails.LastName</p>
                    <p>@currentDate</p>
                    <p>Account Number @Model.UserDetails.AccountNumber</p>
                    <p>NPR. @Model.UserDetails.Balance.ToString("F2") <i class="fa fa-eye"></i></p>
                }
                else
                {
                    <p>No user details available.</p>
                }
            </div>
        </div>
        <button class="next-arrow">&#10095;</button>
    </div>

</section>
<div class="content-sections">
    <!-- Activities Section with Chart -->
    <div class="activities">
        <div class="activities-header">
            <h4>Activities</h4>
            <select class="dropdown" id="period-selector">
                <option value="today">Today</option>
                <option value="this_week">This Week</option>
                <option value="this_month">This Month</option>
            </select>
        </div>
        <p>Total spending: Rs. <span id="total-spending">20,000</span></p>
        <div id="chart_div" style="width: 100%; height: 500px;"></div>
    </div>

    <!-- Transactions Section -->
    <div class="transaction">
        <div class="transaction-header">
            <h4>My Transactions</h4>
            <a asp-page="Transaction">See all</a>
        </div>

        @foreach (var item in Model.Transactions)
        {
            <div class="transaction-item">
                <div class="icon-container
                @(item.Notes == "Food" ? "food-icon" :
                  item.Notes == "NEA" ? "nea-icon" :
                  item.Notes == "Internet" ? "internet-icon" :
                  item.Notes == "College" ? "college-icon" :
                  "default-icon")">
                    <i class="fa-solid
                    @(item.Notes == "Food" ? "fa-bowl-food" :
                      item.Notes == "NEA" ? "fa-lightbulb" :
                      item.Notes == "Internet" ? "fa-wifi" :
                      item.Notes == "College" ? "fa-graduation-cap" :
                      "fa-receipt")"></i>
                </div>

                <div class="transaction-info">
                    <span class="notes">@item.Notes</span>
                    <span class="date">@item.TransactionDate.ToString("yyyy-MM-dd")</span>
                </div>
                <div class="transaction-info">
                    <span class="transaction-type">@item.TransactionType</span>
                </div>
                <div class="transaction-right">
                    <span class="amount">Rs.@item.Amount</span>
                </div>
            </div>
        }
    </div>




    <!-- Categories Section -->
    <div class="categories">
        <div class="categories-header">
            <h4>Categories</h4>
            <a asp-page="Category">See all</a>

            <a asp-page="/AddCategory"><i class="fa fa-plus"></i></a>
        </div>

        @foreach (var item in Model.CategoryExpenditureslist)
        {
            <div class="category-item">
                <div class="icon-container
                @(item.CategoryName == "Food" ? "food-icon" :
                  item.CategoryName == "NEA" ? "nea-icon" :
                  item.CategoryName == "Internet" ? "internet-icon" :
                  item.CategoryName == "College" ? "college-icon" :
                  "default-icon")">
                    <i class="fa-solid
                    @(item.CategoryName == "Food" ? "fa-bowl-food" :
                      item.CategoryName == "NEA" ? "fa-lightbulb" :
                      item.CategoryName == "Internet" ? "fa-wifi" :
                      item.CategoryName == "College" ? "fa-graduation-cap" :
                      "fa-receipt")"></i>
                </div>



                <span>@item.CategoryName</span>
                <span class="amount">@item.TotalAmount</span>
            </div>
        }


  
    </div>
</div>


<script defer src="~/js/site.js"></script>
<script>
    // Load Google Charts
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);

    // Chart data for different periods
    const chartData = {
        today: [
            ['Category', 'Income', 'Expenses'],
            ['Food', 500, 300],
            ['Transport', 200, 100],
            ['Internet', 150, 50],
            ['Others', 100, 75]
        ],
        this_week: [
            ['Day', 'Income', 'Expenses'],
            ['Sun', 500, 300],
            ['Mon', 700, 400],
            ['Tue', 600, 350],
            ['Wed', 800, 500],
            ['Thu', 400, 200],
            ['Fri', 900, 450],
            ['Sat', 1000, 600]
        ],
        this_month: [
            ['Month', 'Income', 'Expenses'],
            ['Jan', 5000, 4000],
            ['Feb', 3000, 2500],
            ['Mar', 4500, 3500],
            ['Apr', 4000, 3000],
            ['May', 6000, 4500],
            ['Jun', 7000, 5000],
            ['Jul', 8000, 5500],
            ['Aug', 6500, 4500],
            ['Sep', 5000, 4000],
            ['Oct', 7500, 6000],
            ['Nov', 6000, 4500],
            ['Dec', 8500, 7000]
        ]
    };

    // Function to draw the chart based on selected period
    function drawChart(period = 'today') {
        const data = google.visualization.arrayToDataTable(chartData[period]);

        const options = {
            title: 'Income vs. Expenses',
            hAxis: { title: 'Category', titleTextStyle: { color: '#333' } },
            vAxis: { minValue: 0 },
            series: {
                0: { color: 'green' },  // Green for Income
                1: { color: 'red' }     // Red for Expenses
            }
        };

        const chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
        chart.draw(data, options);

        // Update total spending dynamically
        const totalSpending = chartData[period].slice(1).reduce((sum, row) => sum + row[2], 0);
        document.getElementById('total-spending').textContent = totalSpending;
    }

    // Event listener for period selection
    document.getElementById('period-selector').addEventListener('change', (event) => {
        drawChart(event.target.value);
    });

    // Initial chart rendering
    drawChart();
</script>