@page
@model TransactionModel
@using Newtonsoft.Json

@{

    ViewData["Title"] = "Transactions";
}



<form method="post" action="@Url.Page("DeleteSelectedTransactions")">
<div class="wrapper">
    <div class="transaction-container">
        <div class="transaction-header">
            <h3>Transactions</h3>
            <div class="button-group">
                <a class="btn-new-transaction" href="/CashTransactions">+ New transaction</a>
                       <button type="submit" class="btn-delete">
                    <i class="fa fa-trash"></i> 
                </button>
                <div class="filter-dropdown">
                    <button class="btn-filter"><i class="fa-solid fa-filter"></i></button>
                    <div class="dropdown-content">
                        <a href="#" onclick="sortTransactions('newest')">Newest</a>
                        <a href="#" onclick="sortTransactions('oldest')">Oldest</a>
                    </div>
                </div>
                <div class="options-dropdown">
                    <button class="btn-options"><i class="fa-solid fa-ellipsis-h"></i></button>
                    <div class="dropdown-content">
                        <a href="#" onclick="downloadCSV()">Download</a>
                    </div>
                </div>
            </div>
        </div>

        <table class="transaction-table">
            <thead>
                <tr>
                    <th></th>
                    <th>DETAILS</th>
                    <th>TRANSACTION TYPE</th>
                    <th>AMOUNT</th>
                    <th>STATUS</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Transactions)
                {


                    <tr>
                            <td>
                                <input type="checkbox" name="selectedTransactions" value="@item.Id" class="transaction-checkbox" />
                            </td>
                        <td class="details">
                            <div class="icon-and-info">
                                <div class="icon-container @(item.Notes == "Food" ? "food-icon" : item.Notes == "NEA" ? "nea-icon" : item.Notes == "Internet" ? "internet-icon" : item.Notes == "College" ? "college-icon" : "default-icon")">
                                    <i class="fa-solid @(item.Notes == "Food" ? "fa-bowl-food" : item.Notes == "NEA" ? "fa-lightbulb" : item.Notes == "Internet" ? "fa-wifi" : item.Notes == "College" ? "fa-graduation-cap" : "fa-receipt") icon"></i>
                                </div>
                                <div class="info">
                                    <span class="date">@item.TransactionDate.ToString("yyyy-MM-dd")</span>
                                    <span class="category">@item.Notes</span>
                                </div>
                            </div>
                        </td>
                        <td>@item.TransactionType</td>
                        <td>Rs.@item.Amount.ToString("F2")</td>
                        <td><span class="status @(item.Status.ToLower())">@item.Status</span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

</form>

<script>
    const allTransactions = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Transactions))');
    console.log(allTransactions);

    function downloadCSV() {
        // Convert transactions to CSV format
        let csvContent = "Date,Category,Merchant,Amount,Status\n";

        allTransactions.forEach(transaction => {
            const date = transaction.TransactionDate || "";
            const category = transaction.Notes || "";
            const merchant = transaction.TransactionType || "";
            const amount = transaction.Amount && !isNaN(transaction.Amount)
                ? transaction.Amount.toFixed(2)
                : "0.00";
            const status = transaction.status || "";

            const row = `${date},${category},${merchant},Rs.${amount},${status}`;
            csvContent += row + "\n";
        });

        // Encode content as CSV file
        const blob = new Blob([csvContent], { type: "text/csv" });
        const url = URL.createObjectURL(blob);

        // Create a download link
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", "transaction_history.csv");
        document.body.appendChild(link);

        // Trigger the download
        link.click();
        document.body.removeChild(link);
    }


</script>



<style>
    .wrapper {
        width: 100%;
        display: flex;
        justify-content: center;
        padding: 20px;
        background-color: #f5f5f5; /* Optional background color */
    }

    .transaction-container {
        width: 100%; /* Make container full width */
        max-width: 800px;
        margin: 0 auto; /* Center align the container */
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        overflow-y: auto;
    }

    .transaction-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .transaction-header h3 {
            margin: 0;
            font-size: 1.5em;
        }

    .button-group {
        display: flex;
        gap: 10px;
    }

    .btn-new-transaction {
        background-color: #02457A;
        color: #fff;
        border: 1px solid #02457A;
        border-radius: 4px;
        cursor: pointer;
        padding: 8px 12px;
    }

    .btn-filter, .btn-options {
        background-color: #fff;
        color: #02457A;
        border: 1px solid #02457A;
        border-radius: 4px;
        cursor: pointer;
        padding: 8px 12px;
    }

    .btn-new-transaction:hover {
        background-color: #013a63;
        color: #fff;
        border-color: #013a63;
    }

    .transaction-table {
        width: 100%;
        border-collapse: collapse;
    }

        .transaction-table th, .transaction-table td {
            padding: 12px 15px;
            text-align: left;
        }

        .transaction-table th {
            background-color: #f3f3f3;
            font-weight: bold;
            color: #333;
        }

        .transaction-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

    .details {
        display: flex;
        align-items: center;
    }

    .icon-and-info {
        display: flex;
        align-items: center;
    }

    .icon {
        font-size: 1.5em;
        margin-right: 10px;
        color: #02457A;
    }

    .info {
        display: flex;
        flex-direction: column;
    }

    .date {
        font-size: 0.9em;
        color: #888;
    }

    .category {
        font-weight: bold;
        color: #333;
    }

    .status {
        padding: 5px 10px;
        border-radius: 4px;
        font-weight: bold;
        text-align: center;
    }

    .success {
        background-color: #4CAF50;
        color: white;
    }

    .failed {
        background-color: red;
        color: white;
    }

    /* Styles for the filter dropdown */
    .filter-dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        top: 100%; /* Position the dropdown below the filter button */
        left: 0;
        background-color: #fff;
        min-width: 120px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        border-radius: 4px;
        z-index: 1;
    }

        .dropdown-content a {
            color: #666; /* Lighter shade for the text */
            padding: 8px 12px;
            text-decoration: none;
            display: block;
            font-size: 0.9em; /* Slightly smaller font */
            font-weight: 400; /* Optional, for lighter weight */
        }

            .dropdown-content a:hover {
                background-color: #f3f3f3;
                color: #333; /* Darker color on hover */
            }

    /* Show the dropdown on hover */
    .filter-dropdown:hover .dropdown-content {
        display: block;
    }

    /* Styling the options dropdown container */
    .options-dropdown {
        position: relative;
        display: inline-block;
    }

    /* Styling the options button */
    .btn-options {
        background-color: #fff;
        color: #02457A;
        border: 1px solid #02457A;
        border-radius: 4px;
        cursor: pointer;
        padding: 8px 12px;
        font-size: 1.2em; /* Adjust the icon size */
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

        .btn-options i {
            font-size: 1.2em; /* Icon size */
        }

        /* Button hover effect */
        .btn-options:hover {
            background-color: #02457A;
            color: #fff;
            border-color: #02457A;
        }

    /* Styling the dropdown content */
    .dropdown-content {
        display: none;
        position: absolute;
        top: 100%; /* Position the dropdown below the button */
        left: 0;
        background-color: #fff;
        min-width: 160px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        border-radius: 4px;
        z-index: 1;
        padding: 5px 0;
    }

        /* Styling the links inside the dropdown */
        .dropdown-content a {
            color: #02457A;
            padding: 8px 16px;
            text-decoration: none;
            display: block;
            font-size: 14px;
            font-weight: 400; /* Optional, for lighter weight */
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            /* Hover effect for dropdown links */
            .dropdown-content a:hover {
                background-color: #f3f3f3;
                color: #02457A;
            }

    /* Show the dropdown when the parent is hovered */
    .options-dropdown:hover .dropdown-content {
        display: block;
    }

    .status.pending {
        color: #fff;
        background-color: yellow; /* Yellow background */
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }


</style>

